

------------------------------
------------------------------
------------------------------
------------------------------
3.29: Creating the Register method in our Auth Controller

------------------------------
3.28: Registering services in the Startup class

------------------------------
3.27: Creating the Login repository method

------------------------------
3.26: Creating the concrete Auth Repository and Register Method


------------------------------
3.25: Creating an Interface for the Repository 
  using System.Threading.Tasks;
  using DatingApp.API.Models;

  namespace DatingApp.API.Data
  {
      public interface IAuthRepository
      {
          Task<User> Register(User user, string password);
          Task<User> Login(string username, string password);
          Task<bool> UserExists(string username);
      }
  }

------------------------------
3.24: The Repository pattern


------------------------------
3.23: Creating the User model 
  In DatindApp.API in folder Model let's create c# file User.
    namespace DatingApp.API.Models
    {
        public class User
        {
            public int Id { get; set; }
            public string Username { get; set; }
            public byte[] PasswordHash { get; set; }
            public byte[] PasswordSalt { get; set; }
        }
    }
  and add to DataContext:
    public DbSet<User> Users { get; set; }
  Add migration:
    $ dotnet ef migrations add AddedUserEntity
  and update fo db:
    $ dotnet ef database update






------------------------------
3.22: Storing passwords in the Database
------------------------------
3.21: Intoduction


------------------------------
------------------------------
3.Security
------------------------------
------------------------------


------------------------------
2.19: Adding GIT for source control
  $ git
  $ git status
  $ cd ..     // to DatingApp
  $ git status
  $ git init
  $ git remote add origin https://github.com/marek2222/angular6_webApiCore_nc.git



------------------------------
2.18: Adding Bootstrap and Font-Awesome to our Angular app
  $ npm install bootstrap@4.1.2 font-awesome@4.7.0



------------------------------
2.17: Displaying data from the API on the HTML page
  Change the value.component.html


------------------------------
2.16: Adding CORS support to the API
  Let's add CORS Support to StartUp.cs


------------------------------
2.15: Making HTTP requests in Angular
  Create new component 'value' in app folder
  Activate Material Icon Theme by F1 option: 
    Material Icons: Activate Icon Theme

  In app.module.ts let's add new import 
     imports: [
      BrowserModule,
      HttpClientModule  -- add this
     ],
   and import component above:
     import { HttpClientModule } from '@angular/common/http';
  
  In value.component.ts let's add a client in ValueComponent to our WebAPI:
    import { Component, OnInit } from '@angular/core';
    import { HttpClient } from '@angular/common/http';

    @Component({
      selector: 'app-value',
      templateUrl: './value.component.html',
      styleUrls: ['./value.component.css']
    })
    export class ValueComponent implements OnInit {
      values: any;

      constructor(private http: HttpClient) { }

      ngOnInit() {
        this.getValues();
      }

      getValues(){
        this.http.get('http://localhost:5000/api/values').subscribe(response => {
          this.values = response;
        }, error => {
          console.log(error);
        });
      }
    }

  Now add the 
    <app-value></app-value>
  to app.component.ts

  Let's run the angular: by 
    $ ng serve
  and run the WebAPI in DatingApp/DatingApp.API in second terminal by:
    $ dotnet watch run

  You should be watch screen:
    value works!



------------------------------
2.14: Adding VS Code extensions used in this course
  Add extension:
  Angular v7 Snippets       by johnpapa.an
  Angular Files             by Alexander Ivanichev
  Angular Language Service  by Angular
  angular2-switcher         by infinity1207
  Auto Rename Tag           by Jun Han
  Bracket Pair Colorizer    by CoenraadS
  Debugger for Chrome       by Microsoft
  Material Icon Theme       by Philipp Kief
  Path Intellisense         by Christian Kohler
  Prettier - Code formatter by Esben Petersen
  TSLint (deprecated)       by egamma


------------------------------
2.13: The Angular bootstrapping and running the Angular app
	Lets change in  package.json line:
"rxjs": "^6.0.0",   ->   "rxjs": "6.0.0",
	and run:
$ npm update
	and run the application by: 
$ ng serve
	Open link: http://localhost:4200/ in your browser.


------------------------------
2.12: Creating the Angular application using AngularCLI
  My and Nail version:
$ dotnet --version    2.1.603 -- 2.1.300
$ node --version      8.11.4  -- 8.11.2
$ npm --version       6.9.0   -- 6.1.0

  In DatingApp directory install angular globally in version 6.0.8:
$ npm install -g @angular/cli@6.0.8
$ dir
$ ng new DatingApp-SPA
$ cd DatingApp-SPA


------------------------------
2.11: Making our code asynchronous


------------------------------
2.10: Retrieving data from the Database
  Create 3 values in Db Browser in Sqlite in  table 'Values' and save the data.
  Afrer creating the IActionResult: GetValues() and GetValue(int id) we run 
$ dotnet watch run
  After use Postman to retrive and test values from WebAPI. 
  Test 2 Get request: 
http://localhost:5000/api/values
http://localhost:5000/api/values/23



------------------------------
2.9: Creating the Database using Entity Framework migrations
  Check the option of ef
$ dotnet ef -h
   and add initial migration
$ dotnet ef migrations add InitialCreate
   and add update to database
$ dotnet ef database update



------------------------------
2.8. Creating the first Model and DataContext
  Add Model folder and file Value.cs and folder Data with context: DataContext.cs. 
  I used a shortcut from Essential ASP.NET Core Snippets to create DataContext.cs file:
$ ef-dbcontext

  I also installed"
  Microsoft.EntityFrameworkCore" Version="2.1.2"
  Microsoft.EntityFrameworkCore.Abstractions" Version="2.1.2"
  Microsoft.EntityFrameworkCore.Sqlite" Version="2.1.2"


------------------------------
2.7. Environment settings and using dotnet watch
$ dotnet watch run


------------------------------
2.6. Running the DotNet Core application
$ dotnet run
-- and open a browser
localhost:5000/api/values
-- and with any value
localhost:5000/api/values/35354



------------------------------
2.4: Creating the DotNet Core WebAPI using the DotNetCLI

--what is version (in commandline) 
$ dotnet --version
$ node --version
$ npm --version

--Narzâ–’dzia wiersza polecenia programu .NET (2.2.104)
$ dotnet -h

--option for new project
$ dotnet new -h

--option for webapi
$ dotnet new webapi -h

------------------------
-- our project
$ mkdir DatingApp
$ cd DatingApp
$ ls
$ dotnet new webapi -o DatingApp.API -n DatingApp.API
